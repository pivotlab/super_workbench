package io.pivotlab
pivotlab_meta_model
// This is a comment
// The first line of the model is the model name

/*
 This is a multi line comment
*/

/**
 This is a doccomment (note the double asterix)
 This comment is used to add documentation to your model,
 and will be added to the output generation if the technology
 you're deploying to supports it
 
 Doccomments apply to whatever is immediately beneath them
 
 The first line of a class definition can't start with a space
 just like PivotLab here.
*/
PivotLab
 /*
 But member definitoins must be indented by a space.
 The name of the member 'model' comes first, followed by a colon ':'
 The type of the member comes next
 
 PivotLab allows you to use these primitive types
 - int
 - float
 - string
 - boolean
 
 But you can also search for definitions over here -->
 and use those
 
 Members can also be other classes defined in the same model.
 
 You can make a member be an array, by putting'[]' after the type.
 This works for classes, primitive and definition types
 
 PivotLab will automatically 'pluralise' the member name for arrays
 but only if the target technology names arrays (xml does, json doesn't)
 So, the member 'model' here, will be called 'models'
 */
 model:Model[]
 definition:Definition[]
 release:Release[]

Model
 name:string
 root:Class
 class:Class[]
 
Class
 name:string
 memberClass:Class[]
 memberDefinition:Definition[]
 
Definition
 name:string
 id:string
 definition:string
 guidance:string
 enumerations:string[]
 facets:NameValue[]
 syntax:Syntax[]
 
NameValue
 name:string
 value:string
 
Syntax
 technologoyName:string
 fields:NameValue[]
 
Release
 generatedModel:Model[]